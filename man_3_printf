.TH _PRINTF 3 "30 Oct 2019" "Holberton School Cohort 10 1.0" "User Commands"
.SH NAME
_printf
- formatted output conversion
.SH SYNOPSIS
.DS
\fB#include "holberton.h"\fP
.PP
\fBint _printf(const char *format, ...);\fP
.DE
.SH DESCRIPTION
The \fB_printf()\fP function produce output according to a \fIformat\fP as described below.
The function \fBprintf()\fP write output to \fIstdout\fP, the standard output stream.
This function write the output under the control of a \fIformat\fP string that specifies how  subsequent  arguments  (or arguments accessed via the variable-length argument facilities of \fBstdarg\fP(3)) are converted for output.
.PP
.RS -4
\fBReturn value\fP
.RE
Upon successful return, this function return the number of characters printed (excluding the null byte used to end output to strings).
.PP
If an output error is encountered, a negative value is returned.
.PP
.RS -4
\fBFormat of the format string\fP
.RE
The format string is a character string, beginning and ending in its initial shift state, if any. The
format string is composed of zero or more directives: ordinary characters (not %), which are copied
unchanged to the output stream; and conversion specifications, each of which results in fetching zero
or more subsequent arguments.
Each conversion specification is introduced by the character \fI%\fP, and ends with a \fIconversion specifier\fP.
In between there may be (in  this  order) zero or more \fIflags\fP, an optional minimum \fIfield width\fP, an optional
\fIprecision\fP and an optional \fIlength modifier\fP.
.PP
The arguments must correspond properly (after type promotion) with the conversion specifier. By default, the arguments are
used in the order given, where each '*' and each conversion specifier asks for the next argument (and it is an error if
insufficiently many arguments are given). One can also specify explicitly which argument is taken, at each place
where an argument is required, by writing "%m$" instead of '%' and "*m$" instead of '*', where the decimal integer
\fIm\fP denotes the position in the argument list of the desired argument, indexed starting from 1.  Thus,
.PP
.RS +4
printf("%*d", width, num);
.RE
and
.RS +4
printf("%2$*1$d", width, num);
.PP
.RE
are equivalent. The second style allows repeated references to the same argument. The C99 standard does not include the
style using '$', which comes from the Single UNIX Specification. If the style using '$' is used, it must be used through
out for all conversions taking an argument and all width and precision arguments, but it may be mixed with "%%" formats
which do not consume an argument. There may be no gaps in the numbers of arguments specified using '$'; for example, if
arguments 1 and 3 are specified, argument 2 must also be specified somewhere in the format string.
.PP
For some numeric conversions a radix character ("decimal point") or thousands' grouping character is used. The actual
character used depends on the \fBLC_NUMERIC\fP part of the locale. The POSIX locale uses '.' as radix character, and does not
have a grouping character. Thus,
.PP
.RS +4
printf("%2$*1$d", width, num);
.RE
.PP
results in "1234567.89" in the POSIX locale, in "1234567,89" in the nl_NL locale, and in "1.234.567,89" in the da_DK
locale.
.PP
.RS -4
\fBThe flag character\fP
.RE
The character % is followed by zero or more of the following flags:
.PP
#      The value should be converted to an "alternate form".  For o conversions,  the first character of the output string
.RS +7
is made zero (by prefixing a 0 if it was not zero already). For x and X conversions, a nonzero result has the string
"0x" (or "0X" for X conversions) prepended to it.  For a, A, e, E, f, F, g, and G conversions, the result will always
contain a decimal point, even if no digits follow it (normally, a decimal point appears in the results of those
conversions only if a digit follows). For g and G conversions, trailing zeros are not removed from the result as they
would otherwise be.  For other conversions, the result is undefined.
.RE
.PP
0      The value should be zero padded.  For d, i, o, u, x, X, a, A, e, E, f, F, g, and G conversions, the converted value
.RS +7
is padded on the left with zeros rather than blanks. If the 0 and - flags both appear, the 0 flag is ignored. If a precision
is given with a numeric conversion (d, i, o, u, x, and X), the 0 flag is ignored. For other conversions, the behavior is undefined.
.RE
.PP
-      The converted value is to be  left adjusted on the field  boundary. (The default is  right  justification.)  Except
.RS +7
for  n  conversions, the converted value is padded on the right with blanks, rather than on the left with blanks or zeros. A
- overrides a 0 if both are given.
.RE
.PP
' '    (a space) A blank should be left before a positive number (or empty string) produced by a signed conversion.
.PP
+      A sign (+ or -) should always be placed before a number produced by a signed conversion.  By default a sign is used
       only for negative numbers.  A + overrides a space if both are used.
.PP
The five flag characters above are defined in the C standard.  The SUSv2 specifies one further flag character.
.PP
'      For decimal conversion (i, d, u, f, F, g, G) the output is to be grouped with thousands' grouping characters if the
.RS +7
locale information indicates any. Note that many versions of gcc(1) cannot parse this option and will issue a warning. SUSv2
does not include %'F.
.RE
.PP
glibc 2.2 adds one further flag character.
.PP
I      For decimal integer conversion (i, d, u)  the output uses the locale's  alternative  output  digits,  if any.  For
.RS +7
example, since glibc 2.2.3 this will give Arabic-Indic digits in the Persian ("fa_IR") locale.
.RE
.PP
.RS -4
\fBThe field width\fP
.RE
An optional decimal digit string (with nonzero first digit) specifying a minimum field width. If the converted value has
fewer characters than the field width, it will be padded with spaces on the left (or right, if the left-adjustment flag
has been given). Instead of a decimal digit string one may write "*" or "*m$" (for some decimal integer m) to specify
that the field width is given in the next argument, or in the m-th argument, respectively, which must be of type int. A
negative field width is taken as a '-' flag followed by a positive field width. In no case does a nonexistent or small
field width cause truncation of a field; if the result of a conversion is wider than the field width, the field is
expanded to contain the conversion result.
.PP
.RS -4
\fBThe precision\fP
.RE
An optional precision, in the form of a period ('.') followed by an optional decimal digit string. Instead of a decimal
digit string one may write "*" or "*m$" (for some decimal integer m) to specify that the precision is given in the next
argument, or in the m-th argument, respectively, which must be of type int. If the precision is given as just '.', the
precision is taken to be zero. A negative precision is taken as if the precision were omitted. This gives the minimum
number of digits to appear for d, i, o, u, x, and X conversions, the number of digits to appear after the radix character
for a, A, e, E, f, and F conversions, the maximum number of significant digits for g and G conversions, or the maximum
number of characters to be printed from a string for s and S conversions.
.PP
.RS -4
\fBThe length modifier\fP
.RE
Here, "integer conversion" stands for d, i, o, u, x, or X conversion.
.PP
h      A  following integer conversion corresponds to a short int or unsigned short int argument, or a following n conver
       sion corresponds to a pointer to a short int argument.
.PP
l      (ell) A following integer conversion corresponds to a long int or unsigned long int argument, or a following n con
       version  corresponds to a pointer to a long int argument, or a following c conversion corresponds to a wint_t argu
       ment, or a following s conversion corresponds to a pointer to wchar_t argument.
.PP
The  SUSv2  knows  about only the length modifiers h (in hd, hi, ho, hx, hX, hn) and l (in ld, li, lo, lx, lX, ln, lc, ls)
and L (in Le, LE, Lf, Lg, LG).
.RS -4
\fBThe conversion specifier\fP
.RE
A character that specifies the type of conversion to be applied.  The conversion specifiers and their meanings are:
.PP
d, i   The int argument is converted to signed decimal notation.  The precision, if any, gives the minimum number of  dig
       its  that  must  appear;  if  the  converted value requires fewer digits, it is padded on the left with zeros.  The
       default precision is 1.  When 0 is printed with an explicit precision 0, the output is empty.
.PP
o, u, x, X
.RS +7
The unsigned int argument is converted to unsigned octal (o), unsigned decimal (u), or unsigned hexadecimal (x and
X) notation.   The  letters abcdef are used for x conversions; the letters ABCDEF are used for X conversions.  The
precision, if any, gives the minimum number of digits that must appear; if the converted value requires fewer dig
its, it is padded on the left with zeros. The default precision is 1. When 0 is printed with an explicit precision
0, the output is empty.
.RE
.PP
c      If  no  l  modifier  is  present, the int argument is converted to an unsigned char, and the resulting character is
       written.  If an l modifier is present, the wint_t (wide character) argument is converted to a multibyte sequence by
       a  call to the wcrtomb(3) function, with a conversion state starting in the initial state, and the resulting multi
       byte string is written.
.PP
s      If no l modifier is present: The const char * argument is expected to be a pointer to an array  of  character  type
       (pointer  to  a  string).   Characters from the array are written up to (but not including) a terminating null byte
       ('\0'); if a precision is specified, no more than the number specified are written.  If a precision  is  given,  no
       null  byte  need be present; if the precision is not specified, or is greater than the size of the array, the array
       must contain a terminating null byte.
.PP
       If an l modifier is present: The const wchar_t * argument is expected to be a pointer to an array of  wide  charac
       ters.  Wide characters from the array are converted to multibyte characters (each by a call to the wcrtomb(3) func
       tion, with a conversion state starting in the initial state before the first wide character), up to and including a
       terminating null wide character.  The resulting multibyte characters are written up to (but not including) the ter
       minating null byte.  If a precision is specified, no more bytes than the number specified are written, but no  par
       tial  multibyte  characters  are  written.  Note that the precision determines the number of bytes written, not the
       number of wide characters or screen positions.  The array must contain a terminating null wide character, unless  a
       precision  is  given  and it is so small that the number of bytes written exceeds it before the end of the array is
       reached.
.PP
p      The void * pointer argument is printed in hexadecimal (as if by %#x or %#lx).
.PP
b      The unsigned int argument is converted to binary
.PP
S      Non printable characters (0 < ASCII value or >= 127) are printed this way: \x, followed by the ASCII code valie in
       hexadecimal (upper case - always 2 characters).
       If no l modifier is present: The const char * argument is expected to be a pointer to an array  of  character  type
       (pointer  to  a  string).   Characters from the array are written up to (but not including) a terminating null byte
       ('\0'); if a precision is specified, no more than the number specified are written.  If a precision  is  given,  no
       null  byte  need be present; if the precision is not specified, or is greater than the size of the array, the array
       must contain a terminating null byte.
.PP
r      Prints the reversed string.
       If no l modifier is present: The const char * argument is expected to be a pointer to an array  of  character  type
       (pointer  to  a  string).   Characters from the array are written up to (but not including) a terminating null byte
       ('\0'); if a precision is specified, no more than the number specified are written.  If a precision  is  given,  no
       null  byte  need be present; if the precision is not specified, or is greater than the size of the array, the array
       must contain a terminating null byte.
.PP
R      Prints the rot13'd string.
       If no l modifier is present: The const char * argument is expected to be a pointer to an array  of  character  type
       (pointer  to  a  string).   Characters from the array are written up to (but not including) a terminating null byte
       ('\0'); if a precision is specified, no more than the number specified are written.  If a precision  is  given,  no
       null  byte  need be present; if the precision is not specified, or is greater than the size of the array, the array
       must contain a terminating null byte.
.PP
%      A '%' is written.  No argument is converted.  The complete conversion specification is '%%'.
.SH EXAMPLE
To print a string:
.PP
.RS +4
#include "holberton.h"

.RE
.RS +4
/**
 * main - Entry point
 * Description: Main function to use printf
 * @void: Void parameter
 * Return: Length of the char (n)
 */
int main(void)
.RE
.RS +4
{
.RE
.RS +4
    char n* = "Holberton School";
.RE
.RS +4
    return (_printf("The best school: %s", n));
.RE
.RS +4
}
.DE
.SH AUTHOR
Written by Alejandro Lopez & Juan Marcos Cabezas.
.SH BUGS
No known bugs.
.SH SEE ALSO
.I printf(3)
